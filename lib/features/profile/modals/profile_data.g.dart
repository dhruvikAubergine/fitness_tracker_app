// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'profile_data.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

ProfileData _$ProfileDataFromJson(Map<String, dynamic> json) => ProfileData(
      email: json['email'] as String?,
      id: json['id'] as int?,
      dateOfBirth: json['date_of_birth'] as String?,
      company: json['company'] as String?,
      height: (json['height'] as num?)?.toDouble(),
      weight: (json['weight'] as num?)?.toDouble(),
      gender: json['gender'] as String?,
      firstName: json['first_name'] as String?,
      lastName: json['last_name'] as String?,
      country: json['country'] as String?,
      isVerify: json['is_verify'] as bool?,
      userType: json['user_type'] as String?,
      isSearchable: json['is_searchable'] as bool?,
      city: json['city'] as String?,
      state: json['state'] as String?,
      postalCode: json['postal_code'] as String?,
      created: json['created'] == null
          ? null
          : DateTime.parse(json['created'] as String),
      isAdmin: json['is_admin'] as bool?,
      lastLogin: json['last_login'] == null
          ? null
          : DateTime.parse(json['last_login'] as String),
      industry: json['industry'],
      avatarGender: json['avatar_gender'] as String?,
      avatarSkinTone: json['avatar_skin_tone'] as int?,
      aboutMe: json['about_me'] as String?,
      userFocus: json['user_focus'] == null
          ? null
          : UserFocus.fromJson(json['user_focus'] as Map<String, dynamic>),
      userInterest: (json['user_interest'] as List<dynamic>?)
          ?.map((e) => UserInterest.fromJson(e as Map<String, dynamic>))
          .toList(),
      heightUnit: json['height_unit'] as String?,
      weightUnit: json['weight_unit'] as String?,
      avatarSkinToneHash: json['avatar_skin_tone_hash'] as String?,
      ageGroupId: json['age_group_id'] as int?,
      isAddInPublicGroup: json['is_add_in_public_group'] as bool?,
      theme: json['theme'] as String?,
      myCubii: json['my_cubii'] as int?,
      timezone: json['timezone'] as String?,
      userKey: json['user_key'] as String?,
      fitbitScope: json['fitbit_scope'] as String?,
      isRemindMe: json['is_remind_me'] as bool?,
      cubiiUpdates: json['cubii_updates'] as bool?,
      distanceType: json['distance_type'] as String?,
      lastLoginOs: json['last_login_os'] as String?,
      reminderDays: json['reminder_days'] as List<dynamic>?,
      isFitbitPull: json['is_fitbit_pull'] as bool?,
      deviceLanguage: json['device_language'] as String?,
      healthkitScope: json['healthkit_scope'],
      userImageType: json['user_image_type'] as String?,
      cubiiResistance: json['cubii_resistance'] as int?,
      isHealthkitPull: json['is_healthkit_pull'] as bool?,
      reminderEndTime: json['reminder_end_time'],
      profileVisibility: json['profile_visibility'] as bool?,
      groupNotifications: json['group_notifications'] as bool?,
      reminderStartTime: json['reminder_start_time'],
      userEquipmentType: json['user_equipment_type'] as String?,
      generalNotification: json['general_notification'] as bool?,
      stayConnectedPopup: json['stay_connected_popup'] as bool?,
      reminderTimeInterval: json['reminder_time_interval'],
      profileImage: json['profile_image'] as String?,
      userBadge: (json['user_badge'] as List<dynamic>?)
          ?.map((e) => UserBadge.fromJson(e as Map<String, dynamic>))
          .toList(),
    );

Map<String, dynamic> _$ProfileDataToJson(ProfileData instance) =>
    <String, dynamic>{
      'email': instance.email,
      'id': instance.id,
      'date_of_birth': instance.dateOfBirth,
      'company': instance.company,
      'height': instance.height,
      'weight': instance.weight,
      'gender': instance.gender,
      'first_name': instance.firstName,
      'last_name': instance.lastName,
      'country': instance.country,
      'is_verify': instance.isVerify,
      'user_type': instance.userType,
      'is_searchable': instance.isSearchable,
      'city': instance.city,
      'state': instance.state,
      'postal_code': instance.postalCode,
      'created': instance.created?.toIso8601String(),
      'is_admin': instance.isAdmin,
      'last_login': instance.lastLogin?.toIso8601String(),
      'industry': instance.industry,
      'avatar_gender': instance.avatarGender,
      'avatar_skin_tone': instance.avatarSkinTone,
      'about_me': instance.aboutMe,
      'user_focus': instance.userFocus,
      'user_interest': instance.userInterest,
      'height_unit': instance.heightUnit,
      'weight_unit': instance.weightUnit,
      'avatar_skin_tone_hash': instance.avatarSkinToneHash,
      'age_group_id': instance.ageGroupId,
      'is_add_in_public_group': instance.isAddInPublicGroup,
      'theme': instance.theme,
      'my_cubii': instance.myCubii,
      'timezone': instance.timezone,
      'user_key': instance.userKey,
      'fitbit_scope': instance.fitbitScope,
      'is_remind_me': instance.isRemindMe,
      'cubii_updates': instance.cubiiUpdates,
      'distance_type': instance.distanceType,
      'last_login_os': instance.lastLoginOs,
      'reminder_days': instance.reminderDays,
      'is_fitbit_pull': instance.isFitbitPull,
      'device_language': instance.deviceLanguage,
      'healthkit_scope': instance.healthkitScope,
      'user_image_type': instance.userImageType,
      'cubii_resistance': instance.cubiiResistance,
      'is_healthkit_pull': instance.isHealthkitPull,
      'reminder_end_time': instance.reminderEndTime,
      'profile_visibility': instance.profileVisibility,
      'group_notifications': instance.groupNotifications,
      'reminder_start_time': instance.reminderStartTime,
      'user_equipment_type': instance.userEquipmentType,
      'general_notification': instance.generalNotification,
      'stay_connected_popup': instance.stayConnectedPopup,
      'reminder_time_interval': instance.reminderTimeInterval,
      'profile_image': instance.profileImage,
      'user_badge': instance.userBadge,
    };
